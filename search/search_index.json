{
    "docs": [
        {
            "location": "/",
            "text": "LTRDCN-1572\n\n\nWelcome to Cisco Live LTRDCN-1572: VXLAN EVPN Fabric and automation using Ansible.\n\n\nFor full documentation visit \nCisco Live\n.\n\n\nSpeakers\n\n\n\n\nFaisal Chaudhry \nPrincipal Architect, Cisco Advanced Services\n\n\nLei Tian \nSolutions Architect, Cisco Advanced Services",
            "title": "Home"
        },
        {
            "location": "/#ltrdcn-1572",
            "text": "Welcome to Cisco Live LTRDCN-1572: VXLAN EVPN Fabric and automation using Ansible.  For full documentation visit  Cisco Live .",
            "title": "LTRDCN-1572"
        },
        {
            "location": "/#speakers",
            "text": "Faisal Chaudhry  Principal Architect, Cisco Advanced Services  Lei Tian  Solutions Architect, Cisco Advanced Services",
            "title": "Speakers"
        },
        {
            "location": "/intro/",
            "text": "VXLAN\n\n\nVXLAN stands for Virtual Extensible Local Area Network. VXLAN is a L2 overlay scheme on top of L3 network or we can say it is a L2 in layer 3 tunnel. It runs over the existing networks and provides the means to stretch the L2 network. Only VMs within the same VXLAN segment can communicate with each other. Each VXLAN segment is identified by a 24 bit segment ID called \u201cVXLAN Network Identifier (VNI)\u201d.  This help overcome 4094 VLAN scale limitation and able to extend it to 224 segments.\n\n\nVXLAN uses BGP as its control plane for Overlay. It makes it forwarding decisions at VTEPs (Virtual tunnel end points) for layer-2 and layer-3. Forwarding happens based on MAC or IP learnt via control plane (MP-BGP EVPN) . VXLAN uses IGP, PIM and BGP as its underlay in the fabric. \n\n\nBelow are some of the terminologies that will be used in the lab:\n\n\n\n\nVNI / VNID\n \u2013 VXLAN Network Identifier. This replaces VLAN ID \n\n\nVTEP\n \u2013 VXLAN Tunnel End Point.\n\n\nThis is the end point where the box performs VXLAN encap / decap\nThis could be physical HW (Nexus9k) or Virtual (Nexus 1000v, Nexus 9000v)\n\n\n\n\n\n\nVXLAN Segment\n -  The resulting layer 2 overlay network\n\n\nVXLAN Gateway\n \u2013 It is a device that forwards traffic between VXLANS. It can be both L2 and L3 forwarding\n\n\nNVE\n \u2013 Network Virtualization Edge\n\n\nNVE is tunnel interface. It represents VTEP\n\n\n\n\n\n\n\n\nAnsible\n\n\nAnsible is an agentless open source software that can be used for configuration management, deployment and orchestration of deployment. The scripts in Ansible are called playbooks; playbook is in YAML format that was desgiened to be easy for humans to read and write. Playbooks include one or more plays, each play include one or more tasks. Each task is associated with one module, which is what gets executed in the playbook. Modules are python scripts that ship with Ansible installation. During the lab, you will be introduced to multiple NXOS modules and ansible template module. \n\n\nYou can find all Ansible modules documentation at below url:\n\nhttp://docs.ansible.com/ansible/latest/list_of_all_modules.html\n\n\nBelow are some of the terminologies that will be used in the lab:\n\n\n\n\nHost\n: remote machines that Ansible manages  \n\n\nGroup\n: several hosts that can be configured together and share common verables \n\n\nInventory\n: file descripts hosts and groups in Ansible.\n\n\nVariable\n: names of value (int, str, dic, list) referenced in playbook or template\n\n\nYAML\n: data format for Playbook or Variables in Ansible \n\n\nPlaybook\n: the script to orchestrate, automate, deploy system in Ansible. One playbook can include multiple plays. \n\n\nRoles\n: group of tasks, templates to implement specific behavior\n\n\nJinja2\n: a Python based tempting language\n\n\n\n\n\n\nAbout this lab\n\n\nAs a standardized overlay technology, multiple vendors have adopted VXLAN as datacenter solution to provide scalability and allow layer 2 across IP network. MP-BPG EVPN as VXLAN control plane protocol provides a robust scalable solution to overcome the limitation in VXLAN flood and learn mode.\n\n\nAs an open source automation tool, Ansible provides the same framework for network administrators to automate network infrastructure as the rest IT organization. \n\n\nThis lab demostates the possibility of using Ansible to automate datacenter VXLAN fabric day 1 provisiong and day 2 operations. \n\n\nLab Flow\n\n\nLab guide will walk the attendees through the below activities:\n\n\n\n\nAnsible installation \n\n\nAnsible playbook \n\n\nDay 1 automation using Ansible \n\n\nDay 2 automation using Ansible \n\n\nDay 0 automation \n\n\nL4-L7 Service insertion\n\n\n\n\nLab Access\n\n\nBelow table provides the IP addresses and credentials for the devices used in this lab: \n\n\n\n\n\n\n\n\nSpine-1\n\n\n198.18.133.33:1030\n\n\nadmin/C1sco12345\n\n\n\n\n\n\n\n\n\n\nSpine-2\n\n\n198.18.133.33:1040\n\n\nadmin/C1sco12345\n\n\n\n\n\n\nLeaf-1\n\n\n198.18.133.33:1050\n\n\nadmin/C1sco12345\n\n\n\n\n\n\nLeaf-3\n\n\n198.18.133.33:1070\n\n\nadmin/C1sco12345\n\n\n\n\n\n\nLeaf-4\n\n\n198.18.1333.33:1080\n\n\nadmin/C1sco12345\n\n\n\n\n\n\nServer-1\n\n\n198.18.134.50\n\n\nroot/C1sco12345\n\n\n\n\n\n\nServer-3\n\n\n198.18.134.52\n\n\nroot/C1sco12345\n\n\n\n\n\n\nServer-4\n\n\n198.18.134.53\n\n\nroot/C1sco12345\n\n\n\n\n\n\nAnsible Server\n\n\n198.18.134.150\n\n\nroot/C1sco12345\n\n\n\n\n\n\nDCNM\n\n\n198.18.134.200\n\n\nadmin/C1sco12345\n\n\n\n\n\n\nF5\n\n\n198.18.4.10\n\n\nroot/default\n\n\n\n\n\n\nRemote Workstation\n\n\n198.18.133.36\n\n\ndemouser/C1sco12345\n\n\n\n\n\n\n\n\nLab topology\n\n\nBelow picture shows the lab topology:",
            "title": "Introduction"
        },
        {
            "location": "/intro/#vxlan",
            "text": "VXLAN stands for Virtual Extensible Local Area Network. VXLAN is a L2 overlay scheme on top of L3 network or we can say it is a L2 in layer 3 tunnel. It runs over the existing networks and provides the means to stretch the L2 network. Only VMs within the same VXLAN segment can communicate with each other. Each VXLAN segment is identified by a 24 bit segment ID called \u201cVXLAN Network Identifier (VNI)\u201d.  This help overcome 4094 VLAN scale limitation and able to extend it to 224 segments.  VXLAN uses BGP as its control plane for Overlay. It makes it forwarding decisions at VTEPs (Virtual tunnel end points) for layer-2 and layer-3. Forwarding happens based on MAC or IP learnt via control plane (MP-BGP EVPN) . VXLAN uses IGP, PIM and BGP as its underlay in the fabric.   Below are some of the terminologies that will be used in the lab:   VNI / VNID  \u2013 VXLAN Network Identifier. This replaces VLAN ID   VTEP  \u2013 VXLAN Tunnel End Point.  This is the end point where the box performs VXLAN encap / decap\nThis could be physical HW (Nexus9k) or Virtual (Nexus 1000v, Nexus 9000v)    VXLAN Segment  -  The resulting layer 2 overlay network  VXLAN Gateway  \u2013 It is a device that forwards traffic between VXLANS. It can be both L2 and L3 forwarding  NVE  \u2013 Network Virtualization Edge  NVE is tunnel interface. It represents VTEP",
            "title": "VXLAN"
        },
        {
            "location": "/intro/#ansible",
            "text": "Ansible is an agentless open source software that can be used for configuration management, deployment and orchestration of deployment. The scripts in Ansible are called playbooks; playbook is in YAML format that was desgiened to be easy for humans to read and write. Playbooks include one or more plays, each play include one or more tasks. Each task is associated with one module, which is what gets executed in the playbook. Modules are python scripts that ship with Ansible installation. During the lab, you will be introduced to multiple NXOS modules and ansible template module.   You can find all Ansible modules documentation at below url: http://docs.ansible.com/ansible/latest/list_of_all_modules.html  Below are some of the terminologies that will be used in the lab:   Host : remote machines that Ansible manages    Group : several hosts that can be configured together and share common verables   Inventory : file descripts hosts and groups in Ansible.  Variable : names of value (int, str, dic, list) referenced in playbook or template  YAML : data format for Playbook or Variables in Ansible   Playbook : the script to orchestrate, automate, deploy system in Ansible. One playbook can include multiple plays.   Roles : group of tasks, templates to implement specific behavior  Jinja2 : a Python based tempting language",
            "title": "Ansible"
        },
        {
            "location": "/intro/#about-this-lab",
            "text": "As a standardized overlay technology, multiple vendors have adopted VXLAN as datacenter solution to provide scalability and allow layer 2 across IP network. MP-BPG EVPN as VXLAN control plane protocol provides a robust scalable solution to overcome the limitation in VXLAN flood and learn mode.  As an open source automation tool, Ansible provides the same framework for network administrators to automate network infrastructure as the rest IT organization.   This lab demostates the possibility of using Ansible to automate datacenter VXLAN fabric day 1 provisiong and day 2 operations.",
            "title": "About this lab"
        },
        {
            "location": "/intro/#lab-flow",
            "text": "Lab guide will walk the attendees through the below activities:   Ansible installation   Ansible playbook   Day 1 automation using Ansible   Day 2 automation using Ansible   Day 0 automation   L4-L7 Service insertion",
            "title": "Lab Flow"
        },
        {
            "location": "/intro/#lab-access",
            "text": "Below table provides the IP addresses and credentials for the devices used in this lab:      Spine-1  198.18.133.33:1030  admin/C1sco12345      Spine-2  198.18.133.33:1040  admin/C1sco12345    Leaf-1  198.18.133.33:1050  admin/C1sco12345    Leaf-3  198.18.133.33:1070  admin/C1sco12345    Leaf-4  198.18.1333.33:1080  admin/C1sco12345    Server-1  198.18.134.50  root/C1sco12345    Server-3  198.18.134.52  root/C1sco12345    Server-4  198.18.134.53  root/C1sco12345    Ansible Server  198.18.134.150  root/C1sco12345    DCNM  198.18.134.200  admin/C1sco12345    F5  198.18.4.10  root/default    Remote Workstation  198.18.133.36  demouser/C1sco12345",
            "title": "Lab Access"
        },
        {
            "location": "/intro/#lab-topology",
            "text": "Below picture shows the lab topology:",
            "title": "Lab topology"
        },
        {
            "location": "/task1-ansible-node/",
            "text": "Your first task will be to build an Ansible node on a server running redhat CentOS operating system.  At the end of this task, you will have a fully operational Ansible node.\n\n\nStep 1: Connect to lab using anyconnect VPN\n\n\nYou will connect to \ndcloud-lon-anyconnect.cisco.com\n using Cisco VPN AnyConnect client, as shown in below picture, with the username and password provided by the lab admin.\n\n\nNote:\n lab admin will furnish the credentials information to the participant.  If you don't have this information please ask the lab speakers.\n\n\n\n\nStep 2: Enter VPN credentials\n\n\nAfter prompted for credentials, use the credentials provided by the lab admin.    \n\n\u2022   Below is an example of user logging into POD1\n\n\n\n\n\n\nHit accept when the prompt appears to accept the VPN connection login    \n\n\n\n\n\n\nStep 3: RDP to workstation\n\n\nIn this step, you will connect to the workstation with RDP client on your machines.  Use below details for this RDP session:\n\n\n\n\nWorkstation: \n198.18.133.36\n\n\nUsername: \ndcloud\\demouser\n\n\nPassword: \nC1sco12345\n\n\n\n\nBelow screenshot is only an example for this RDP connection:\n\n\n\n\nStep 4: MTputty\n\n\nOnce you have the RDP session to the remote workstation, then you will use MTputty client to connect to all devices in this lab.  \n\n\nMTputty is already installed on the Desktop of the workstation where you connected using RDP.  Run this application by clicking on the icon on the desktop:\n\n\n\n\nStep 5: SSH into Ansible node\n\n\nSSH into Ansible node (198.18.134.150) by double clicking the Ansible icon on the left pan with username \nroot\n and password \nC1sco12345\n\n\n\n\nStep 6: Verify Python\n\n\nOnce successfully SSH into the ansible node, the very first thing we are going to do after logging into Ansible server is verify the python version by running \npython --version\n command - as shown below:\n\n\n[root@rhel7-tools ~]# python --version\nPython 2.7.5\n\n\n\nIt is an important step as we need minimum 2.7.5 version of python in order to install some features for ansbile.  The output of above command confirms this version. \n\n\nAnsible can be run from any machine with Python 2 (versions 2.6 or 2.7) or Python 3 (versions 3.5 and higher) installed. \n\n\n\n\nStep 7: Install PIP\n\n\nAfter verifying we have the minimum version of python installed, we are now going to Install PIP python package with the below commands:\n\n\n[root@rhel7-tools ~]# easy_install pip\nSearching for pip\nBest match: pip 8.1.1\nAdding pip 8.1.1 to easy-install.pth file\nInstalling pip script to /usr/bin\nInstalling pip3.5 script to /usr/bin\nInstalling pip3 script to /usr/bin\n\n\nUsing /usr/lib/python2.7/site-packages\nProcessing dependencies for pip\nFinished processing dependencies for pip",
            "title": "Task 1 - Prepare Ansible node"
        },
        {
            "location": "/task1-ansible-node/#step-1-connect-to-lab-using-anyconnect-vpn",
            "text": "You will connect to  dcloud-lon-anyconnect.cisco.com  using Cisco VPN AnyConnect client, as shown in below picture, with the username and password provided by the lab admin.  Note:  lab admin will furnish the credentials information to the participant.  If you don't have this information please ask the lab speakers.",
            "title": "Step 1: Connect to lab using anyconnect VPN"
        },
        {
            "location": "/task1-ansible-node/#step-2-enter-vpn-credentials",
            "text": "After prompted for credentials, use the credentials provided by the lab admin.     \n\u2022   Below is an example of user logging into POD1    Hit accept when the prompt appears to accept the VPN connection login",
            "title": "Step 2: Enter VPN credentials"
        },
        {
            "location": "/task1-ansible-node/#step-3-rdp-to-workstation",
            "text": "In this step, you will connect to the workstation with RDP client on your machines.  Use below details for this RDP session:   Workstation:  198.18.133.36  Username:  dcloud\\demouser  Password:  C1sco12345   Below screenshot is only an example for this RDP connection:",
            "title": "Step 3: RDP to workstation"
        },
        {
            "location": "/task1-ansible-node/#step-4-mtputty",
            "text": "Once you have the RDP session to the remote workstation, then you will use MTputty client to connect to all devices in this lab.    MTputty is already installed on the Desktop of the workstation where you connected using RDP.  Run this application by clicking on the icon on the desktop:",
            "title": "Step 4: MTputty"
        },
        {
            "location": "/task1-ansible-node/#step-5-ssh-into-ansible-node",
            "text": "SSH into Ansible node (198.18.134.150) by double clicking the Ansible icon on the left pan with username  root  and password  C1sco12345",
            "title": "Step 5: SSH into Ansible node"
        },
        {
            "location": "/task1-ansible-node/#step-6-verify-python",
            "text": "Once successfully SSH into the ansible node, the very first thing we are going to do after logging into Ansible server is verify the python version by running  python --version  command - as shown below:  [root@rhel7-tools ~]# python --version\nPython 2.7.5  It is an important step as we need minimum 2.7.5 version of python in order to install some features for ansbile.  The output of above command confirms this version.   Ansible can be run from any machine with Python 2 (versions 2.6 or 2.7) or Python 3 (versions 3.5 and higher) installed.",
            "title": "Step 6: Verify Python"
        },
        {
            "location": "/task1-ansible-node/#step-7-install-pip",
            "text": "After verifying we have the minimum version of python installed, we are now going to Install PIP python package with the below commands:  [root@rhel7-tools ~]# easy_install pip\nSearching for pip\nBest match: pip 8.1.1\nAdding pip 8.1.1 to easy-install.pth file\nInstalling pip script to /usr/bin\nInstalling pip3.5 script to /usr/bin\nInstalling pip3 script to /usr/bin  Using /usr/lib/python2.7/site-packages\nProcessing dependencies for pip\nFinished processing dependencies for pip",
            "title": "Step 7: Install PIP"
        }
    ]
}